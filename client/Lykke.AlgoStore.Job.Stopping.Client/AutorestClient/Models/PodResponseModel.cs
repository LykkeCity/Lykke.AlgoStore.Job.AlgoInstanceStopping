// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.Job.Stopping.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PodResponseModel
    {
        /// <summary>
        /// Initializes a new instance of the PodResponseModel class.
        /// </summary>
        public PodResponseModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PodResponseModel class.
        /// </summary>
        public PodResponseModel(string name, string namespaceProperty, string phase)
        {
            Name = name;
            NamespaceProperty = namespaceProperty;
            Phase = phase;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Phase")]
        public string Phase { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (NamespaceProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NamespaceProperty");
            }
            if (Phase == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Phase");
            }
        }
    }
}
