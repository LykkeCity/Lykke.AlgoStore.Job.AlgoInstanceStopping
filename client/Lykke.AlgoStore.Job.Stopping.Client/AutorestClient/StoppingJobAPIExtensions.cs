// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.AlgoStore.Job.Stopping.Client.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StoppingJobAPI.
    /// </summary>
    public static partial class StoppingJobAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IStoppingJobAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IStoppingJobAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            public static object GetPods(this IStoppingJobAPI operations, string instanceId = default(string))
            {
                return operations.GetPodsAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPodsAsync(this IStoppingJobAPI operations, string instanceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPodsWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            public static ErrorResponse DeleteAlgoInstacne(this IStoppingJobAPI operations, string instanceId = default(string))
            {
                return operations.DeleteAlgoInstacneAsync(instanceId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAlgoInstacneAsync(this IStoppingJobAPI operations, string instanceId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAlgoInstacneWithHttpMessagesAsync(instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='podNamespace'>
            /// </param>
            public static ErrorResponse DeleteAlgoInstacneByInstanceIdAndPod(this IStoppingJobAPI operations, string instanceId = default(string), string podNamespace = default(string))
            {
                return operations.DeleteAlgoInstacneByInstanceIdAndPodAsync(instanceId, podNamespace).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='podNamespace'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAlgoInstacneByInstanceIdAndPodAsync(this IStoppingJobAPI operations, string instanceId = default(string), string podNamespace = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAlgoInstacneByInstanceIdAndPodWithHttpMessagesAsync(instanceId, podNamespace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
